type User @entity {
  id: ID!
  timestamp: BigInt!
  lastActivityTimestamp: BigInt!
  transaction: String!
  accountSource: String
  address: String

  deposit: BigInt!
  withdraw: BigInt!
  allocated: BigInt!
  deallocated: BigInt!

  accounts: [Account!]! @derivedFrom(field: "user")
  dailyHistory: [UserDailyHistory!]! @derivedFrom(field: "user")
  totalHistory: [UserTotalHistory!]! @derivedFrom(field: "user")
  quotes: [Quote!]! @derivedFrom(field: "user")

  totalTradeCount: BigInt!
  tradesOver1000: BigInt!
  tradesOver2500: BigInt!
  tradesOver5000: BigInt!
  tradesOver10000: BigInt!

  paidFundingFeeHistory: [PaidFundingFee!]! @derivedFrom(field: "user")
}

type UserActivity @entity {
  id: ID!
  user: String!
  accountSource: String
  timestamp: BigInt!
  updateTimestamp: BigInt
}

type Account @entity {
  id: ID!
  user: User!
  timestamp: BigInt!
  name: String
  quotesCount: BigInt!
  positionsCount: BigInt!
  lastActivityTimestamp: BigInt!
  allocated: BigInt!
  deallocated: BigInt!
  deposit: BigInt!
  withdraw: BigInt!
  transaction: String!
  updateTimestamp: BigInt!
  accountSource: String
  paidFundingFeeHistory: [PaidFundingFee!]! @derivedFrom(field: "account")

  allocatedBalance: BigInt
  lockedCVA: BigInt
  lockedLF: BigInt
  lockedPartyAmm: BigInt
  lockedPartyBmm: BigInt

  pendingCVA: BigInt
  pendingLF: BigInt
  pendingPartyAmm: BigInt
  pendingPartyBmm: BigInt

  quotes: [Quote!]! @derivedFrom(field: "account")
  accountSettlementData: [AccountSettlementData!]! @derivedFrom(field: "account")
}

type BalanceChange @entity {
  id: ID!
  type: String!
  account: String!
  amount: BigInt!
  collateral: String!
  timestamp: BigInt!
  blockNumber: BigInt!
  transaction: String!
}

type TradeHistory @entity {
  id: ID!
  account: String!
  volume: BigInt!
  timestamp: BigInt!
  updateTimestamp: BigInt!
  blockNumber: BigInt!
  transaction: String!
  quoteStatus: Int!
  quote: BigInt!
}

type Quote @entity {
  id: ID!
  account: Account!
  accountSource: String
  symbolId: BigInt!
  positionType: Int!
  orderType: Int!
  
  deadline: BigInt!
  partyBsWhiteList: [String!]
  quantity: BigInt!

  price: BigInt!
  marketPrice: BigInt!
  openPrice: BigInt
  openPriceFundingRate: BigInt!
  paidFundingRate: BigInt!
  paidFundingFeeHistory: [PaidFundingFee!]! @derivedFrom(field: "quote")

  remainingLF: BigInt!
  remainingCVA: BigInt!
  remainingPartyAMM: BigInt!
  remainingPartyBAMM: BigInt!

  lf: BigInt!
  cva: BigInt!
  partyAmm: BigInt!
  partyBmm: BigInt!

  quoteStatus: Int!
  blockNumber: BigInt!
  closedAmount: BigInt!
  avgClosedPrice: BigInt!
  partyB: String
  collateral: String!
  liquidatedSide: Int
  timestamp: BigInt!
  updateTimestamp: BigInt!
  transaction: String!
  user: User!
  solver: Solver
  symbol: Symbol!
  

  requestedCloseCount: BigInt!
  quoteCloses: [QuoteClose!]! @derivedFrom(field: "quote")

  fullyFilledAt: BigInt
  fullyFilledAtTx: String

  requestOpenAt: BigInt
  requestOpenTransaction: String
  openedAt: BigInt
  openTransaction: String

  requestToCancelAt: BigInt
  requestToCancelTransaction: String

  cancelAt: BigInt
  cancelTransaction: String

  expiredAt: BigInt
  expiredTransaction: String

  forceCancelAt: BigInt
  forceCancelTransaction: String

  liquidatedAt: BigInt
  liquidatedTransaction: String

  liquidationAmount: BigInt
  liquidationPrice: BigInt

  fullyClosedAt: BigInt

  quoteSettlements: [QuoteSettlementData!]! @derivedFrom(field: "quote")
}

type QuoteClose @entity {
  id: ID!
  quote: Quote!

  filledAt: BigInt
  fillTransaction: String
  fullyFilledAt: BigInt
  fullyFilledAtTx: String

  requestCancelAt: BigInt
  requestCancelTransaction: String

  cancelAt: BigInt
  cancelTransaction: String

  requestAt: BigInt
  requestCloseTransaction: String

  forceCloseAt: BigInt
  forceCloseTransaction: String

  forceCancelCloseAt: BigInt
  forceCancelCloseTransaction: String

  orderType: Int!
  closePrice: BigInt
  requestedPrice: BigInt

  quantity: BigInt!
}

type DailyHistory @entity {
  id: ID!
  quotesCount: BigInt!
  tradeVolume: BigInt!
  openTradeVolume: BigInt!
  closeTradeVolume: BigInt!
  deposit: BigInt!
  withdraw: BigInt!
  allocate: BigInt!
  deallocate: BigInt!
  activeUsers: BigInt!
  newUsers: BigInt!
  newAccounts: BigInt!
  platformFee: BigInt!
  openInterest: BigInt!
  maxOpenInterest: BigInt!
  accountSource: String
  updateTimestamp: BigInt!
  timestamp: BigInt!
}

type UserDailyHistory @entity {
  id: ID!
  user: User!
  quotesCount: BigInt!
  tradeVolume: BigInt!
  openTradeVolume: BigInt!
  closeTradeVolume: BigInt!
  deposit: BigInt!
  withdraw: BigInt!
  allocate: BigInt!
  deallocate: BigInt!
  accounts: BigInt!
  generatedFee: BigInt!
  accountSource: String
  updateTimestamp: BigInt!
  timestamp: BigInt!
}

type UserSymbolDailyHistory @entity {
  id: ID!
  user: User!
  symbol: Symbol!
  quotesCount: BigInt!
  tradeVolume: BigInt!
  openTradeVolume: BigInt!
  closeTradeVolume: BigInt!
  generatedFee: BigInt!
  accountSource: String
  updateTimestamp: BigInt!
  timestamp: BigInt!
}

type UserTotalHistory @entity {
  id: ID!
  user: User!
  quotesCount: BigInt!
  tradeVolume: BigInt!
  openTradeVolume: BigInt!
  closeTradeVolume: BigInt!
  deposit: BigInt!
  withdraw: BigInt!
  allocate: BigInt!
  deallocate: BigInt!
  accounts: BigInt!
  generatedFee: BigInt!
  accountSource: String
  updateTimestamp: BigInt!
  timestamp: BigInt!
}

type TotalHistory @entity {
  id: ID!
  quotesCount: BigInt!
  tradeVolume: BigInt!
  openTradeVolume: BigInt!
  closeTradeVolume: BigInt!
  deposit: BigInt!
  withdraw: BigInt!
  allocate: BigInt!
  deallocate: BigInt!
  users: BigInt!
  accounts: BigInt!
  platformFee: BigInt!
  accountSource: String
  updateTimestamp: BigInt!
  timestamp: BigInt!
}

type Symbol @entity {
  id: ID!
  name: String!
  tradingFee: BigInt!
  timestamp: BigInt!
  updateTimestamp: BigInt!
  totalTradeVolume: SymbolTradeVolume @derivedFrom(field: "symbol")
  dailyTradeVolume: [SymbolDailyTradeVolume!] @derivedFrom(field: "symbol")
  openInterests: [OpenInterest!] @derivedFrom(field: "symbol")
  quotes: [Quote!]! @derivedFrom(field: "symbol")
  fundingRateEpochDuration: BigInt!
}

type SymbolFeeChange @entity {
  id: ID!
  symbol: Symbol!
  tradingFee: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  transaction: String!
}

type SymbolDailyTradeVolume @entity {
  id: ID!
  symbol: Symbol!
  timestamp: BigInt!
  updateTimestamp: BigInt!
  volume: BigInt!
  accountSource: String
}

type SymbolTradeVolume @entity {
  id: ID!
  symbolId: BigInt!
  timestamp: BigInt!
  updateTimestamp: BigInt!
  volume: BigInt!
  accountSource: String
  symbol: Symbol!
}

type OpenInterest @entity {
  id: ID!
  amount: BigInt!
  accumulatedAmount: BigInt!
  timestamp: BigInt!
  accountSource: String
  symbol: Symbol
}

type PriceCheck @entity {
  id: ID!
  givenPrice: BigInt!
  symbol: String!
  event: String!
  additionalInfo: String
  timestamp: BigInt!
  transaction: String!
}

type ExecutedLiquidation @entity {
  id: ID!
  partyA: String!
  liquidator: String!
  timestamp: BigInt!
}

type PartyALiquidation @entity {
  id: ID!
  partyA: String!
  liquidator: String!
  liquidationType: Int!
  timestamp: BigInt!
  transaction: String!
  liquidateAllocatedBalance: BigInt
  liquidateCva: BigInt
  liquidatePendingCva: BigInt
  liquidateLf: BigInt
  liquidatePendingLf: BigInt
  liquidatePrice: BigInt
}

type PartyBLiquidation @entity {
  id: ID!
  partyA: String!
  partyB: String!
  liquidator: String!
  timestamp: BigInt!
  transaction: String!
  liquidateAllocatedBalance: BigInt
  liquidateCva: BigInt
  liquidatePendingCva: BigInt
  liquidateLf: BigInt
  liquidatePendingLf: BigInt
}

type PartyALiquidationDisputed @entity {
  id: ID!
  partyA: String!
  timestamp: BigInt!
  transaction: String!
}

type Configuration @entity {
  id: ID!
  collateral: String!
  updateTimestamp: BigInt!
  updateTransaction: String!
}

type GrantedRole @entity {
  id: ID!
  role: String!
  user: String!
  grantTransaction: String
  revokeTransaction: String
  updateTimestamp: BigInt!
}

type PaidFundingFee @entity {
  id: ID!
  quote: Quote!
  user: User!
  account: Account!
  timestamp: BigInt!
  transaction: String!
  rateApplied: BigInt!
  paidFee: BigInt!
}

type Solver @entity {
  id: ID!
  address: String
  quotes: [Quote!]! @derivedFrom(field: "solver")
  hourlySymbolFundingRateAverage: [HourlySymbolFundingRateAverage!]!
    @derivedFrom(field: "solver")
}

type SolverDailyHistory @entity {
  id: ID!
  solver: Solver!
  accountSource: String
  quotesCount: BigInt!
  tradeVolume: BigInt!
  openTradeVolume: BigInt!
  closeTradeVolume: BigInt!
  generatedFee: BigInt!
  updateTimestamp: BigInt!
  timestamp: BigInt!
}

type SolverTotalHistory @entity {
  id: ID!
  solver: Solver!
  accountSource: String
  quotesCount: BigInt!
  tradeVolume: BigInt!
  openTradeVolume: BigInt!
  closeTradeVolume: BigInt!
  generatedFee: BigInt!
  updateTimestamp: BigInt!
  timestamp: BigInt!
}

type HourlySymbolFundingRateAverage @entity {
  id: ID!
  symbol: Symbol!
  solver: Solver!

  timestamp: BigInt!
  lastUpdatedTimestamp: BigInt!

  rateApplied: BigInt!
  longRateApplied: BigInt!
  shortRateApplied: BigInt!

  fundingRateEpochDuration: BigInt!
}

type PartyASymbolPrice @entity {
  id: ID!
  partyA: String!
  symbolId: BigInt!
  requestedOpenPrice: BigInt!
  timeStamp: BigInt!
  trHash: String!
}

type QuoteSettlementData @entity {
  id: ID!
  quote: Quote!
  updatedPrice: BigInt!
  timestamp: BigInt!
  transaction: String!
}

type AccountSettlementData @entity {
  id: ID!
  account: Account
  newPartyAAllocatedBalance: BigInt!
  timestamp: BigInt!
  transaction: String!
}
