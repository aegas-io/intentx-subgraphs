// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static loadInBlock(id: string): User | null {
    return changetype<User | null>(store.get_in_block("User", id));
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get lastActivityTimestamp(): BigInt {
    let value = this.get("lastActivityTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastActivityTimestamp(value: BigInt) {
    this.set("lastActivityTimestamp", Value.fromBigInt(value));
  }

  get transaction(): Bytes {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transaction(value: Bytes) {
    this.set("transaction", Value.fromBytes(value));
  }

  get accountSource(): Bytes | null {
    let value = this.get("accountSource");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set accountSource(value: Bytes | null) {
    if (!value) {
      this.unset("accountSource");
    } else {
      this.set("accountSource", Value.fromBytes(<Bytes>value));
    }
  }

  get address(): Bytes | null {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes | null) {
    if (!value) {
      this.unset("address");
    } else {
      this.set("address", Value.fromBytes(<Bytes>value));
    }
  }

  get deposit(): BigInt {
    let value = this.get("deposit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set deposit(value: BigInt) {
    this.set("deposit", Value.fromBigInt(value));
  }

  get withdraw(): BigInt {
    let value = this.get("withdraw");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set withdraw(value: BigInt) {
    this.set("withdraw", Value.fromBigInt(value));
  }

  get allocated(): BigInt {
    let value = this.get("allocated");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set allocated(value: BigInt) {
    this.set("allocated", Value.fromBigInt(value));
  }

  get deallocated(): BigInt {
    let value = this.get("deallocated");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set deallocated(value: BigInt) {
    this.set("deallocated", Value.fromBigInt(value));
  }

  get accounts(): Array<string> {
    let value = this.get("accounts");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  get dailyHistory(): Array<string> {
    let value = this.get("dailyHistory");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  get totalHistory(): Array<string> {
    let value = this.get("totalHistory");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  get quotes(): Array<string> {
    let value = this.get("quotes");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  get totalTradeCount(): BigInt {
    let value = this.get("totalTradeCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTradeCount(value: BigInt) {
    this.set("totalTradeCount", Value.fromBigInt(value));
  }

  get tradesOver1000(): BigInt {
    let value = this.get("tradesOver1000");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tradesOver1000(value: BigInt) {
    this.set("tradesOver1000", Value.fromBigInt(value));
  }

  get tradesOver2500(): BigInt {
    let value = this.get("tradesOver2500");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tradesOver2500(value: BigInt) {
    this.set("tradesOver2500", Value.fromBigInt(value));
  }

  get tradesOver5000(): BigInt {
    let value = this.get("tradesOver5000");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tradesOver5000(value: BigInt) {
    this.set("tradesOver5000", Value.fromBigInt(value));
  }

  get tradesOver10000(): BigInt {
    let value = this.get("tradesOver10000");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tradesOver10000(value: BigInt) {
    this.set("tradesOver10000", Value.fromBigInt(value));
  }

  get paidFundingFeeHistory(): Array<string> {
    let value = this.get("paidFundingFeeHistory");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }
}

export class UserActivity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserActivity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UserActivity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserActivity", id.toString(), this);
    }
  }

  static loadInBlock(id: string): UserActivity | null {
    return changetype<UserActivity | null>(
      store.get_in_block("UserActivity", id)
    );
  }

  static load(id: string): UserActivity | null {
    return changetype<UserActivity | null>(store.get("UserActivity", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get accountSource(): Bytes | null {
    let value = this.get("accountSource");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set accountSource(value: Bytes | null) {
    if (!value) {
      this.unset("accountSource");
    } else {
      this.set("accountSource", Value.fromBytes(<Bytes>value));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get updateTimestamp(): BigInt | null {
    let value = this.get("updateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set updateTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("updateTimestamp");
    } else {
      this.set("updateTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Account must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Account", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Account | null {
    return changetype<Account | null>(store.get_in_block("Account", id));
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get quotesCount(): BigInt {
    let value = this.get("quotesCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set quotesCount(value: BigInt) {
    this.set("quotesCount", Value.fromBigInt(value));
  }

  get positionsCount(): BigInt {
    let value = this.get("positionsCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set positionsCount(value: BigInt) {
    this.set("positionsCount", Value.fromBigInt(value));
  }

  get lastActivityTimestamp(): BigInt {
    let value = this.get("lastActivityTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastActivityTimestamp(value: BigInt) {
    this.set("lastActivityTimestamp", Value.fromBigInt(value));
  }

  get allocated(): BigInt {
    let value = this.get("allocated");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set allocated(value: BigInt) {
    this.set("allocated", Value.fromBigInt(value));
  }

  get deallocated(): BigInt {
    let value = this.get("deallocated");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set deallocated(value: BigInt) {
    this.set("deallocated", Value.fromBigInt(value));
  }

  get deposit(): BigInt {
    let value = this.get("deposit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set deposit(value: BigInt) {
    this.set("deposit", Value.fromBigInt(value));
  }

  get withdraw(): BigInt {
    let value = this.get("withdraw");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set withdraw(value: BigInt) {
    this.set("withdraw", Value.fromBigInt(value));
  }

  get transaction(): Bytes {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transaction(value: Bytes) {
    this.set("transaction", Value.fromBytes(value));
  }

  get updateTimestamp(): BigInt {
    let value = this.get("updateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updateTimestamp(value: BigInt) {
    this.set("updateTimestamp", Value.fromBigInt(value));
  }

  get accountSource(): Bytes | null {
    let value = this.get("accountSource");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set accountSource(value: Bytes | null) {
    if (!value) {
      this.unset("accountSource");
    } else {
      this.set("accountSource", Value.fromBytes(<Bytes>value));
    }
  }

  get paidFundingFeeHistory(): Array<string> {
    let value = this.get("paidFundingFeeHistory");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  get allocatedBalance(): BigInt | null {
    let value = this.get("allocatedBalance");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set allocatedBalance(value: BigInt | null) {
    if (!value) {
      this.unset("allocatedBalance");
    } else {
      this.set("allocatedBalance", Value.fromBigInt(<BigInt>value));
    }
  }

  get lockedCVA(): BigInt | null {
    let value = this.get("lockedCVA");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lockedCVA(value: BigInt | null) {
    if (!value) {
      this.unset("lockedCVA");
    } else {
      this.set("lockedCVA", Value.fromBigInt(<BigInt>value));
    }
  }

  get lockedLF(): BigInt | null {
    let value = this.get("lockedLF");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lockedLF(value: BigInt | null) {
    if (!value) {
      this.unset("lockedLF");
    } else {
      this.set("lockedLF", Value.fromBigInt(<BigInt>value));
    }
  }

  get lockedPartyAmm(): BigInt | null {
    let value = this.get("lockedPartyAmm");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lockedPartyAmm(value: BigInt | null) {
    if (!value) {
      this.unset("lockedPartyAmm");
    } else {
      this.set("lockedPartyAmm", Value.fromBigInt(<BigInt>value));
    }
  }

  get lockedPartyBmm(): BigInt | null {
    let value = this.get("lockedPartyBmm");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lockedPartyBmm(value: BigInt | null) {
    if (!value) {
      this.unset("lockedPartyBmm");
    } else {
      this.set("lockedPartyBmm", Value.fromBigInt(<BigInt>value));
    }
  }

  get pendingCVA(): BigInt | null {
    let value = this.get("pendingCVA");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set pendingCVA(value: BigInt | null) {
    if (!value) {
      this.unset("pendingCVA");
    } else {
      this.set("pendingCVA", Value.fromBigInt(<BigInt>value));
    }
  }

  get pendingLF(): BigInt | null {
    let value = this.get("pendingLF");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set pendingLF(value: BigInt | null) {
    if (!value) {
      this.unset("pendingLF");
    } else {
      this.set("pendingLF", Value.fromBigInt(<BigInt>value));
    }
  }

  get pendingPartyAmm(): BigInt | null {
    let value = this.get("pendingPartyAmm");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set pendingPartyAmm(value: BigInt | null) {
    if (!value) {
      this.unset("pendingPartyAmm");
    } else {
      this.set("pendingPartyAmm", Value.fromBigInt(<BigInt>value));
    }
  }

  get pendingPartyBmm(): BigInt | null {
    let value = this.get("pendingPartyBmm");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set pendingPartyBmm(value: BigInt | null) {
    if (!value) {
      this.unset("pendingPartyBmm");
    } else {
      this.set("pendingPartyBmm", Value.fromBigInt(<BigInt>value));
    }
  }

  get quotes(): Array<string> {
    let value = this.get("quotes");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  get accountSettlementData(): Array<string> {
    let value = this.get("accountSettlementData");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }
}

export class BalanceChange extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BalanceChange entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BalanceChange must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BalanceChange", id.toString(), this);
    }
  }

  static loadInBlock(id: string): BalanceChange | null {
    return changetype<BalanceChange | null>(
      store.get_in_block("BalanceChange", id)
    );
  }

  static load(id: string): BalanceChange | null {
    return changetype<BalanceChange | null>(store.get("BalanceChange", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get collateral(): Bytes {
    let value = this.get("collateral");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set collateral(value: Bytes) {
    this.set("collateral", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transaction(): Bytes {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transaction(value: Bytes) {
    this.set("transaction", Value.fromBytes(value));
  }
}

export class TradeHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TradeHistory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TradeHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TradeHistory", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TradeHistory | null {
    return changetype<TradeHistory | null>(
      store.get_in_block("TradeHistory", id)
    );
  }

  static load(id: string): TradeHistory | null {
    return changetype<TradeHistory | null>(store.get("TradeHistory", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get volume(): BigInt {
    let value = this.get("volume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set volume(value: BigInt) {
    this.set("volume", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get updateTimestamp(): BigInt {
    let value = this.get("updateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updateTimestamp(value: BigInt) {
    this.set("updateTimestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transaction(): Bytes {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transaction(value: Bytes) {
    this.set("transaction", Value.fromBytes(value));
  }

  get quoteStatus(): i32 {
    let value = this.get("quoteStatus");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set quoteStatus(value: i32) {
    this.set("quoteStatus", Value.fromI32(value));
  }

  get quote(): BigInt {
    let value = this.get("quote");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set quote(value: BigInt) {
    this.set("quote", Value.fromBigInt(value));
  }
}

export class Quote extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Quote entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Quote must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Quote", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Quote | null {
    return changetype<Quote | null>(store.get_in_block("Quote", id));
  }

  static load(id: string): Quote | null {
    return changetype<Quote | null>(store.get("Quote", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get accountSource(): Bytes | null {
    let value = this.get("accountSource");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set accountSource(value: Bytes | null) {
    if (!value) {
      this.unset("accountSource");
    } else {
      this.set("accountSource", Value.fromBytes(<Bytes>value));
    }
  }

  get symbolId(): BigInt {
    let value = this.get("symbolId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set symbolId(value: BigInt) {
    this.set("symbolId", Value.fromBigInt(value));
  }

  get positionType(): i32 {
    let value = this.get("positionType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set positionType(value: i32) {
    this.set("positionType", Value.fromI32(value));
  }

  get orderType(): i32 {
    let value = this.get("orderType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set orderType(value: i32) {
    this.set("orderType", Value.fromI32(value));
  }

  get deadline(): BigInt {
    let value = this.get("deadline");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set deadline(value: BigInt) {
    this.set("deadline", Value.fromBigInt(value));
  }

  get partyBsWhiteList(): Array<Bytes> | null {
    let value = this.get("partyBsWhiteList");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set partyBsWhiteList(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("partyBsWhiteList");
    } else {
      this.set("partyBsWhiteList", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }

  get quantity(): BigInt {
    let value = this.get("quantity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set quantity(value: BigInt) {
    this.set("quantity", Value.fromBigInt(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get marketPrice(): BigInt {
    let value = this.get("marketPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set marketPrice(value: BigInt) {
    this.set("marketPrice", Value.fromBigInt(value));
  }

  get openPrice(): BigInt | null {
    let value = this.get("openPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set openPrice(value: BigInt | null) {
    if (!value) {
      this.unset("openPrice");
    } else {
      this.set("openPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get openPriceFundingRate(): BigInt {
    let value = this.get("openPriceFundingRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set openPriceFundingRate(value: BigInt) {
    this.set("openPriceFundingRate", Value.fromBigInt(value));
  }

  get paidFundingRate(): BigInt {
    let value = this.get("paidFundingRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set paidFundingRate(value: BigInt) {
    this.set("paidFundingRate", Value.fromBigInt(value));
  }

  get paidFundingFeeHistory(): Array<string> {
    let value = this.get("paidFundingFeeHistory");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  get remainingLF(): BigInt {
    let value = this.get("remainingLF");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set remainingLF(value: BigInt) {
    this.set("remainingLF", Value.fromBigInt(value));
  }

  get remainingCVA(): BigInt {
    let value = this.get("remainingCVA");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set remainingCVA(value: BigInt) {
    this.set("remainingCVA", Value.fromBigInt(value));
  }

  get remainingPartyAMM(): BigInt {
    let value = this.get("remainingPartyAMM");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set remainingPartyAMM(value: BigInt) {
    this.set("remainingPartyAMM", Value.fromBigInt(value));
  }

  get remainingPartyBAMM(): BigInt {
    let value = this.get("remainingPartyBAMM");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set remainingPartyBAMM(value: BigInt) {
    this.set("remainingPartyBAMM", Value.fromBigInt(value));
  }

  get lf(): BigInt {
    let value = this.get("lf");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lf(value: BigInt) {
    this.set("lf", Value.fromBigInt(value));
  }

  get cva(): BigInt {
    let value = this.get("cva");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set cva(value: BigInt) {
    this.set("cva", Value.fromBigInt(value));
  }

  get partyAmm(): BigInt {
    let value = this.get("partyAmm");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set partyAmm(value: BigInt) {
    this.set("partyAmm", Value.fromBigInt(value));
  }

  get partyBmm(): BigInt {
    let value = this.get("partyBmm");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set partyBmm(value: BigInt) {
    this.set("partyBmm", Value.fromBigInt(value));
  }

  get quoteStatus(): i32 {
    let value = this.get("quoteStatus");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set quoteStatus(value: i32) {
    this.set("quoteStatus", Value.fromI32(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get closedAmount(): BigInt {
    let value = this.get("closedAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set closedAmount(value: BigInt) {
    this.set("closedAmount", Value.fromBigInt(value));
  }

  get avgClosedPrice(): BigInt {
    let value = this.get("avgClosedPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set avgClosedPrice(value: BigInt) {
    this.set("avgClosedPrice", Value.fromBigInt(value));
  }

  get partyB(): Bytes | null {
    let value = this.get("partyB");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set partyB(value: Bytes | null) {
    if (!value) {
      this.unset("partyB");
    } else {
      this.set("partyB", Value.fromBytes(<Bytes>value));
    }
  }

  get collateral(): Bytes {
    let value = this.get("collateral");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set collateral(value: Bytes) {
    this.set("collateral", Value.fromBytes(value));
  }

  get liquidatedSide(): i32 {
    let value = this.get("liquidatedSide");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set liquidatedSide(value: i32) {
    this.set("liquidatedSide", Value.fromI32(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get updateTimestamp(): BigInt {
    let value = this.get("updateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updateTimestamp(value: BigInt) {
    this.set("updateTimestamp", Value.fromBigInt(value));
  }

  get transaction(): Bytes {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transaction(value: Bytes) {
    this.set("transaction", Value.fromBytes(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get solver(): string | null {
    let value = this.get("solver");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set solver(value: string | null) {
    if (!value) {
      this.unset("solver");
    } else {
      this.set("solver", Value.fromString(<string>value));
    }
  }

  get symbol(): string {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get requestedCloseCount(): BigInt {
    let value = this.get("requestedCloseCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set requestedCloseCount(value: BigInt) {
    this.set("requestedCloseCount", Value.fromBigInt(value));
  }

  get quoteCloses(): Array<string> {
    let value = this.get("quoteCloses");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  get fullyFilledAt(): BigInt | null {
    let value = this.get("fullyFilledAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fullyFilledAt(value: BigInt | null) {
    if (!value) {
      this.unset("fullyFilledAt");
    } else {
      this.set("fullyFilledAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get fullyFilledAtTx(): Bytes | null {
    let value = this.get("fullyFilledAtTx");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fullyFilledAtTx(value: Bytes | null) {
    if (!value) {
      this.unset("fullyFilledAtTx");
    } else {
      this.set("fullyFilledAtTx", Value.fromBytes(<Bytes>value));
    }
  }

  get requestOpenAt(): BigInt | null {
    let value = this.get("requestOpenAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set requestOpenAt(value: BigInt | null) {
    if (!value) {
      this.unset("requestOpenAt");
    } else {
      this.set("requestOpenAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get requestOpenTransaction(): Bytes | null {
    let value = this.get("requestOpenTransaction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set requestOpenTransaction(value: Bytes | null) {
    if (!value) {
      this.unset("requestOpenTransaction");
    } else {
      this.set("requestOpenTransaction", Value.fromBytes(<Bytes>value));
    }
  }

  get openedAt(): BigInt | null {
    let value = this.get("openedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set openedAt(value: BigInt | null) {
    if (!value) {
      this.unset("openedAt");
    } else {
      this.set("openedAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get openTransaction(): Bytes | null {
    let value = this.get("openTransaction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set openTransaction(value: Bytes | null) {
    if (!value) {
      this.unset("openTransaction");
    } else {
      this.set("openTransaction", Value.fromBytes(<Bytes>value));
    }
  }

  get requestToCancelAt(): BigInt | null {
    let value = this.get("requestToCancelAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set requestToCancelAt(value: BigInt | null) {
    if (!value) {
      this.unset("requestToCancelAt");
    } else {
      this.set("requestToCancelAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get requestToCancelTransaction(): Bytes | null {
    let value = this.get("requestToCancelTransaction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set requestToCancelTransaction(value: Bytes | null) {
    if (!value) {
      this.unset("requestToCancelTransaction");
    } else {
      this.set("requestToCancelTransaction", Value.fromBytes(<Bytes>value));
    }
  }

  get cancelAt(): BigInt | null {
    let value = this.get("cancelAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set cancelAt(value: BigInt | null) {
    if (!value) {
      this.unset("cancelAt");
    } else {
      this.set("cancelAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get cancelTransaction(): Bytes | null {
    let value = this.get("cancelTransaction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set cancelTransaction(value: Bytes | null) {
    if (!value) {
      this.unset("cancelTransaction");
    } else {
      this.set("cancelTransaction", Value.fromBytes(<Bytes>value));
    }
  }

  get expiredAt(): BigInt | null {
    let value = this.get("expiredAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set expiredAt(value: BigInt | null) {
    if (!value) {
      this.unset("expiredAt");
    } else {
      this.set("expiredAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get expiredTransaction(): Bytes | null {
    let value = this.get("expiredTransaction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set expiredTransaction(value: Bytes | null) {
    if (!value) {
      this.unset("expiredTransaction");
    } else {
      this.set("expiredTransaction", Value.fromBytes(<Bytes>value));
    }
  }

  get forceCancelAt(): BigInt | null {
    let value = this.get("forceCancelAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set forceCancelAt(value: BigInt | null) {
    if (!value) {
      this.unset("forceCancelAt");
    } else {
      this.set("forceCancelAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get forceCancelTransaction(): Bytes | null {
    let value = this.get("forceCancelTransaction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set forceCancelTransaction(value: Bytes | null) {
    if (!value) {
      this.unset("forceCancelTransaction");
    } else {
      this.set("forceCancelTransaction", Value.fromBytes(<Bytes>value));
    }
  }

  get liquidatedAt(): BigInt | null {
    let value = this.get("liquidatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set liquidatedAt(value: BigInt | null) {
    if (!value) {
      this.unset("liquidatedAt");
    } else {
      this.set("liquidatedAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get liquidatedTransaction(): Bytes | null {
    let value = this.get("liquidatedTransaction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set liquidatedTransaction(value: Bytes | null) {
    if (!value) {
      this.unset("liquidatedTransaction");
    } else {
      this.set("liquidatedTransaction", Value.fromBytes(<Bytes>value));
    }
  }

  get liquidationAmount(): BigInt | null {
    let value = this.get("liquidationAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set liquidationAmount(value: BigInt | null) {
    if (!value) {
      this.unset("liquidationAmount");
    } else {
      this.set("liquidationAmount", Value.fromBigInt(<BigInt>value));
    }
  }

  get liquidationPrice(): BigInt | null {
    let value = this.get("liquidationPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set liquidationPrice(value: BigInt | null) {
    if (!value) {
      this.unset("liquidationPrice");
    } else {
      this.set("liquidationPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get fullyClosedAt(): BigInt | null {
    let value = this.get("fullyClosedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fullyClosedAt(value: BigInt | null) {
    if (!value) {
      this.unset("fullyClosedAt");
    } else {
      this.set("fullyClosedAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get quoteSettlements(): Array<string> {
    let value = this.get("quoteSettlements");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }
}

export class QuoteClose extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save QuoteClose entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type QuoteClose must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("QuoteClose", id.toString(), this);
    }
  }

  static loadInBlock(id: string): QuoteClose | null {
    return changetype<QuoteClose | null>(store.get_in_block("QuoteClose", id));
  }

  static load(id: string): QuoteClose | null {
    return changetype<QuoteClose | null>(store.get("QuoteClose", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get quote(): string {
    let value = this.get("quote");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set quote(value: string) {
    this.set("quote", Value.fromString(value));
  }

  get filledAt(): BigInt | null {
    let value = this.get("filledAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set filledAt(value: BigInt | null) {
    if (!value) {
      this.unset("filledAt");
    } else {
      this.set("filledAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get fillTransaction(): Bytes | null {
    let value = this.get("fillTransaction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fillTransaction(value: Bytes | null) {
    if (!value) {
      this.unset("fillTransaction");
    } else {
      this.set("fillTransaction", Value.fromBytes(<Bytes>value));
    }
  }

  get fullyFilledAt(): BigInt | null {
    let value = this.get("fullyFilledAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fullyFilledAt(value: BigInt | null) {
    if (!value) {
      this.unset("fullyFilledAt");
    } else {
      this.set("fullyFilledAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get fullyFilledAtTx(): Bytes | null {
    let value = this.get("fullyFilledAtTx");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fullyFilledAtTx(value: Bytes | null) {
    if (!value) {
      this.unset("fullyFilledAtTx");
    } else {
      this.set("fullyFilledAtTx", Value.fromBytes(<Bytes>value));
    }
  }

  get requestCancelAt(): BigInt | null {
    let value = this.get("requestCancelAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set requestCancelAt(value: BigInt | null) {
    if (!value) {
      this.unset("requestCancelAt");
    } else {
      this.set("requestCancelAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get requestCancelTransaction(): Bytes | null {
    let value = this.get("requestCancelTransaction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set requestCancelTransaction(value: Bytes | null) {
    if (!value) {
      this.unset("requestCancelTransaction");
    } else {
      this.set("requestCancelTransaction", Value.fromBytes(<Bytes>value));
    }
  }

  get cancelAt(): BigInt | null {
    let value = this.get("cancelAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set cancelAt(value: BigInt | null) {
    if (!value) {
      this.unset("cancelAt");
    } else {
      this.set("cancelAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get cancelTransaction(): Bytes | null {
    let value = this.get("cancelTransaction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set cancelTransaction(value: Bytes | null) {
    if (!value) {
      this.unset("cancelTransaction");
    } else {
      this.set("cancelTransaction", Value.fromBytes(<Bytes>value));
    }
  }

  get requestAt(): BigInt | null {
    let value = this.get("requestAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set requestAt(value: BigInt | null) {
    if (!value) {
      this.unset("requestAt");
    } else {
      this.set("requestAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get requestCloseTransaction(): Bytes | null {
    let value = this.get("requestCloseTransaction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set requestCloseTransaction(value: Bytes | null) {
    if (!value) {
      this.unset("requestCloseTransaction");
    } else {
      this.set("requestCloseTransaction", Value.fromBytes(<Bytes>value));
    }
  }

  get forceCloseAt(): BigInt | null {
    let value = this.get("forceCloseAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set forceCloseAt(value: BigInt | null) {
    if (!value) {
      this.unset("forceCloseAt");
    } else {
      this.set("forceCloseAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get forceCloseTransaction(): Bytes | null {
    let value = this.get("forceCloseTransaction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set forceCloseTransaction(value: Bytes | null) {
    if (!value) {
      this.unset("forceCloseTransaction");
    } else {
      this.set("forceCloseTransaction", Value.fromBytes(<Bytes>value));
    }
  }

  get forceCancelCloseAt(): BigInt | null {
    let value = this.get("forceCancelCloseAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set forceCancelCloseAt(value: BigInt | null) {
    if (!value) {
      this.unset("forceCancelCloseAt");
    } else {
      this.set("forceCancelCloseAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get forceCancelCloseTransaction(): Bytes | null {
    let value = this.get("forceCancelCloseTransaction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set forceCancelCloseTransaction(value: Bytes | null) {
    if (!value) {
      this.unset("forceCancelCloseTransaction");
    } else {
      this.set("forceCancelCloseTransaction", Value.fromBytes(<Bytes>value));
    }
  }

  get orderType(): i32 {
    let value = this.get("orderType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set orderType(value: i32) {
    this.set("orderType", Value.fromI32(value));
  }

  get closePrice(): BigInt | null {
    let value = this.get("closePrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set closePrice(value: BigInt | null) {
    if (!value) {
      this.unset("closePrice");
    } else {
      this.set("closePrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get requestedPrice(): BigInt | null {
    let value = this.get("requestedPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set requestedPrice(value: BigInt | null) {
    if (!value) {
      this.unset("requestedPrice");
    } else {
      this.set("requestedPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get quantity(): BigInt {
    let value = this.get("quantity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set quantity(value: BigInt) {
    this.set("quantity", Value.fromBigInt(value));
  }
}

export class DailyHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DailyHistory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DailyHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DailyHistory", id.toString(), this);
    }
  }

  static loadInBlock(id: string): DailyHistory | null {
    return changetype<DailyHistory | null>(
      store.get_in_block("DailyHistory", id)
    );
  }

  static load(id: string): DailyHistory | null {
    return changetype<DailyHistory | null>(store.get("DailyHistory", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get quotesCount(): BigInt {
    let value = this.get("quotesCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set quotesCount(value: BigInt) {
    this.set("quotesCount", Value.fromBigInt(value));
  }

  get tradeVolume(): BigInt {
    let value = this.get("tradeVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tradeVolume(value: BigInt) {
    this.set("tradeVolume", Value.fromBigInt(value));
  }

  get openTradeVolume(): BigInt {
    let value = this.get("openTradeVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set openTradeVolume(value: BigInt) {
    this.set("openTradeVolume", Value.fromBigInt(value));
  }

  get closeTradeVolume(): BigInt {
    let value = this.get("closeTradeVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set closeTradeVolume(value: BigInt) {
    this.set("closeTradeVolume", Value.fromBigInt(value));
  }

  get deposit(): BigInt {
    let value = this.get("deposit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set deposit(value: BigInt) {
    this.set("deposit", Value.fromBigInt(value));
  }

  get withdraw(): BigInt {
    let value = this.get("withdraw");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set withdraw(value: BigInt) {
    this.set("withdraw", Value.fromBigInt(value));
  }

  get allocate(): BigInt {
    let value = this.get("allocate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set allocate(value: BigInt) {
    this.set("allocate", Value.fromBigInt(value));
  }

  get deallocate(): BigInt {
    let value = this.get("deallocate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set deallocate(value: BigInt) {
    this.set("deallocate", Value.fromBigInt(value));
  }

  get activeUsers(): BigInt {
    let value = this.get("activeUsers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set activeUsers(value: BigInt) {
    this.set("activeUsers", Value.fromBigInt(value));
  }

  get newUsers(): BigInt {
    let value = this.get("newUsers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set newUsers(value: BigInt) {
    this.set("newUsers", Value.fromBigInt(value));
  }

  get newAccounts(): BigInt {
    let value = this.get("newAccounts");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set newAccounts(value: BigInt) {
    this.set("newAccounts", Value.fromBigInt(value));
  }

  get platformFee(): BigInt {
    let value = this.get("platformFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set platformFee(value: BigInt) {
    this.set("platformFee", Value.fromBigInt(value));
  }

  get openInterest(): BigInt {
    let value = this.get("openInterest");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set openInterest(value: BigInt) {
    this.set("openInterest", Value.fromBigInt(value));
  }

  get maxOpenInterest(): BigInt {
    let value = this.get("maxOpenInterest");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set maxOpenInterest(value: BigInt) {
    this.set("maxOpenInterest", Value.fromBigInt(value));
  }

  get accountSource(): Bytes | null {
    let value = this.get("accountSource");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set accountSource(value: Bytes | null) {
    if (!value) {
      this.unset("accountSource");
    } else {
      this.set("accountSource", Value.fromBytes(<Bytes>value));
    }
  }

  get updateTimestamp(): BigInt {
    let value = this.get("updateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updateTimestamp(value: BigInt) {
    this.set("updateTimestamp", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class UserDailyHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserDailyHistory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UserDailyHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserDailyHistory", id.toString(), this);
    }
  }

  static loadInBlock(id: string): UserDailyHistory | null {
    return changetype<UserDailyHistory | null>(
      store.get_in_block("UserDailyHistory", id)
    );
  }

  static load(id: string): UserDailyHistory | null {
    return changetype<UserDailyHistory | null>(
      store.get("UserDailyHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get quotesCount(): BigInt {
    let value = this.get("quotesCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set quotesCount(value: BigInt) {
    this.set("quotesCount", Value.fromBigInt(value));
  }

  get tradeVolume(): BigInt {
    let value = this.get("tradeVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tradeVolume(value: BigInt) {
    this.set("tradeVolume", Value.fromBigInt(value));
  }

  get openTradeVolume(): BigInt {
    let value = this.get("openTradeVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set openTradeVolume(value: BigInt) {
    this.set("openTradeVolume", Value.fromBigInt(value));
  }

  get closeTradeVolume(): BigInt {
    let value = this.get("closeTradeVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set closeTradeVolume(value: BigInt) {
    this.set("closeTradeVolume", Value.fromBigInt(value));
  }

  get deposit(): BigInt {
    let value = this.get("deposit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set deposit(value: BigInt) {
    this.set("deposit", Value.fromBigInt(value));
  }

  get withdraw(): BigInt {
    let value = this.get("withdraw");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set withdraw(value: BigInt) {
    this.set("withdraw", Value.fromBigInt(value));
  }

  get allocate(): BigInt {
    let value = this.get("allocate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set allocate(value: BigInt) {
    this.set("allocate", Value.fromBigInt(value));
  }

  get deallocate(): BigInt {
    let value = this.get("deallocate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set deallocate(value: BigInt) {
    this.set("deallocate", Value.fromBigInt(value));
  }

  get accounts(): BigInt {
    let value = this.get("accounts");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set accounts(value: BigInt) {
    this.set("accounts", Value.fromBigInt(value));
  }

  get generatedFee(): BigInt {
    let value = this.get("generatedFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set generatedFee(value: BigInt) {
    this.set("generatedFee", Value.fromBigInt(value));
  }

  get accountSource(): Bytes | null {
    let value = this.get("accountSource");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set accountSource(value: Bytes | null) {
    if (!value) {
      this.unset("accountSource");
    } else {
      this.set("accountSource", Value.fromBytes(<Bytes>value));
    }
  }

  get updateTimestamp(): BigInt {
    let value = this.get("updateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updateTimestamp(value: BigInt) {
    this.set("updateTimestamp", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class UserSymbolDailyHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save UserSymbolDailyHistory entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UserSymbolDailyHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserSymbolDailyHistory", id.toString(), this);
    }
  }

  static loadInBlock(id: string): UserSymbolDailyHistory | null {
    return changetype<UserSymbolDailyHistory | null>(
      store.get_in_block("UserSymbolDailyHistory", id)
    );
  }

  static load(id: string): UserSymbolDailyHistory | null {
    return changetype<UserSymbolDailyHistory | null>(
      store.get("UserSymbolDailyHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get quotesCount(): BigInt {
    let value = this.get("quotesCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set quotesCount(value: BigInt) {
    this.set("quotesCount", Value.fromBigInt(value));
  }

  get tradeVolume(): BigInt {
    let value = this.get("tradeVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tradeVolume(value: BigInt) {
    this.set("tradeVolume", Value.fromBigInt(value));
  }

  get openTradeVolume(): BigInt {
    let value = this.get("openTradeVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set openTradeVolume(value: BigInt) {
    this.set("openTradeVolume", Value.fromBigInt(value));
  }

  get closeTradeVolume(): BigInt {
    let value = this.get("closeTradeVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set closeTradeVolume(value: BigInt) {
    this.set("closeTradeVolume", Value.fromBigInt(value));
  }

  get generatedFee(): BigInt {
    let value = this.get("generatedFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set generatedFee(value: BigInt) {
    this.set("generatedFee", Value.fromBigInt(value));
  }

  get accountSource(): Bytes | null {
    let value = this.get("accountSource");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set accountSource(value: Bytes | null) {
    if (!value) {
      this.unset("accountSource");
    } else {
      this.set("accountSource", Value.fromBytes(<Bytes>value));
    }
  }

  get updateTimestamp(): BigInt {
    let value = this.get("updateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updateTimestamp(value: BigInt) {
    this.set("updateTimestamp", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class UserTotalHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserTotalHistory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UserTotalHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserTotalHistory", id.toString(), this);
    }
  }

  static loadInBlock(id: string): UserTotalHistory | null {
    return changetype<UserTotalHistory | null>(
      store.get_in_block("UserTotalHistory", id)
    );
  }

  static load(id: string): UserTotalHistory | null {
    return changetype<UserTotalHistory | null>(
      store.get("UserTotalHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get quotesCount(): BigInt {
    let value = this.get("quotesCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set quotesCount(value: BigInt) {
    this.set("quotesCount", Value.fromBigInt(value));
  }

  get tradeVolume(): BigInt {
    let value = this.get("tradeVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tradeVolume(value: BigInt) {
    this.set("tradeVolume", Value.fromBigInt(value));
  }

  get openTradeVolume(): BigInt {
    let value = this.get("openTradeVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set openTradeVolume(value: BigInt) {
    this.set("openTradeVolume", Value.fromBigInt(value));
  }

  get closeTradeVolume(): BigInt {
    let value = this.get("closeTradeVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set closeTradeVolume(value: BigInt) {
    this.set("closeTradeVolume", Value.fromBigInt(value));
  }

  get deposit(): BigInt {
    let value = this.get("deposit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set deposit(value: BigInt) {
    this.set("deposit", Value.fromBigInt(value));
  }

  get withdraw(): BigInt {
    let value = this.get("withdraw");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set withdraw(value: BigInt) {
    this.set("withdraw", Value.fromBigInt(value));
  }

  get allocate(): BigInt {
    let value = this.get("allocate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set allocate(value: BigInt) {
    this.set("allocate", Value.fromBigInt(value));
  }

  get deallocate(): BigInt {
    let value = this.get("deallocate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set deallocate(value: BigInt) {
    this.set("deallocate", Value.fromBigInt(value));
  }

  get accounts(): BigInt {
    let value = this.get("accounts");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set accounts(value: BigInt) {
    this.set("accounts", Value.fromBigInt(value));
  }

  get generatedFee(): BigInt {
    let value = this.get("generatedFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set generatedFee(value: BigInt) {
    this.set("generatedFee", Value.fromBigInt(value));
  }

  get accountSource(): Bytes | null {
    let value = this.get("accountSource");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set accountSource(value: Bytes | null) {
    if (!value) {
      this.unset("accountSource");
    } else {
      this.set("accountSource", Value.fromBytes(<Bytes>value));
    }
  }

  get updateTimestamp(): BigInt {
    let value = this.get("updateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updateTimestamp(value: BigInt) {
    this.set("updateTimestamp", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class TotalHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TotalHistory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TotalHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TotalHistory", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TotalHistory | null {
    return changetype<TotalHistory | null>(
      store.get_in_block("TotalHistory", id)
    );
  }

  static load(id: string): TotalHistory | null {
    return changetype<TotalHistory | null>(store.get("TotalHistory", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get quotesCount(): BigInt {
    let value = this.get("quotesCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set quotesCount(value: BigInt) {
    this.set("quotesCount", Value.fromBigInt(value));
  }

  get tradeVolume(): BigInt {
    let value = this.get("tradeVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tradeVolume(value: BigInt) {
    this.set("tradeVolume", Value.fromBigInt(value));
  }

  get openTradeVolume(): BigInt {
    let value = this.get("openTradeVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set openTradeVolume(value: BigInt) {
    this.set("openTradeVolume", Value.fromBigInt(value));
  }

  get closeTradeVolume(): BigInt {
    let value = this.get("closeTradeVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set closeTradeVolume(value: BigInt) {
    this.set("closeTradeVolume", Value.fromBigInt(value));
  }

  get deposit(): BigInt {
    let value = this.get("deposit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set deposit(value: BigInt) {
    this.set("deposit", Value.fromBigInt(value));
  }

  get withdraw(): BigInt {
    let value = this.get("withdraw");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set withdraw(value: BigInt) {
    this.set("withdraw", Value.fromBigInt(value));
  }

  get allocate(): BigInt {
    let value = this.get("allocate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set allocate(value: BigInt) {
    this.set("allocate", Value.fromBigInt(value));
  }

  get deallocate(): BigInt {
    let value = this.get("deallocate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set deallocate(value: BigInt) {
    this.set("deallocate", Value.fromBigInt(value));
  }

  get users(): BigInt {
    let value = this.get("users");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set users(value: BigInt) {
    this.set("users", Value.fromBigInt(value));
  }

  get accounts(): BigInt {
    let value = this.get("accounts");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set accounts(value: BigInt) {
    this.set("accounts", Value.fromBigInt(value));
  }

  get platformFee(): BigInt {
    let value = this.get("platformFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set platformFee(value: BigInt) {
    this.set("platformFee", Value.fromBigInt(value));
  }

  get accountSource(): Bytes | null {
    let value = this.get("accountSource");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set accountSource(value: Bytes | null) {
    if (!value) {
      this.unset("accountSource");
    } else {
      this.set("accountSource", Value.fromBytes(<Bytes>value));
    }
  }

  get updateTimestamp(): BigInt {
    let value = this.get("updateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updateTimestamp(value: BigInt) {
    this.set("updateTimestamp", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Symbol extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Symbol entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Symbol must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Symbol", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Symbol | null {
    return changetype<Symbol | null>(store.get_in_block("Symbol", id));
  }

  static load(id: string): Symbol | null {
    return changetype<Symbol | null>(store.get("Symbol", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get tradingFee(): BigInt {
    let value = this.get("tradingFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tradingFee(value: BigInt) {
    this.set("tradingFee", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get updateTimestamp(): BigInt {
    let value = this.get("updateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updateTimestamp(value: BigInt) {
    this.set("updateTimestamp", Value.fromBigInt(value));
  }

  get totalTradeVolume(): string | null {
    let value = this.get("totalTradeVolume");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  get dailyTradeVolume(): Array<string> | null {
    let value = this.get("dailyTradeVolume");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  get openInterests(): Array<string> | null {
    let value = this.get("openInterests");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  get quotes(): Array<string> {
    let value = this.get("quotes");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  get fundingRateEpochDuration(): BigInt {
    let value = this.get("fundingRateEpochDuration");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set fundingRateEpochDuration(value: BigInt) {
    this.set("fundingRateEpochDuration", Value.fromBigInt(value));
  }
}

export class SymbolFeeChange extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SymbolFeeChange entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SymbolFeeChange must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SymbolFeeChange", id.toString(), this);
    }
  }

  static loadInBlock(id: string): SymbolFeeChange | null {
    return changetype<SymbolFeeChange | null>(
      store.get_in_block("SymbolFeeChange", id)
    );
  }

  static load(id: string): SymbolFeeChange | null {
    return changetype<SymbolFeeChange | null>(store.get("SymbolFeeChange", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get tradingFee(): BigInt {
    let value = this.get("tradingFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tradingFee(value: BigInt) {
    this.set("tradingFee", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transaction(): Bytes {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transaction(value: Bytes) {
    this.set("transaction", Value.fromBytes(value));
  }
}

export class SymbolDailyTradeVolume extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save SymbolDailyTradeVolume entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SymbolDailyTradeVolume must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SymbolDailyTradeVolume", id.toString(), this);
    }
  }

  static loadInBlock(id: string): SymbolDailyTradeVolume | null {
    return changetype<SymbolDailyTradeVolume | null>(
      store.get_in_block("SymbolDailyTradeVolume", id)
    );
  }

  static load(id: string): SymbolDailyTradeVolume | null {
    return changetype<SymbolDailyTradeVolume | null>(
      store.get("SymbolDailyTradeVolume", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get updateTimestamp(): BigInt {
    let value = this.get("updateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updateTimestamp(value: BigInt) {
    this.set("updateTimestamp", Value.fromBigInt(value));
  }

  get volume(): BigInt {
    let value = this.get("volume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set volume(value: BigInt) {
    this.set("volume", Value.fromBigInt(value));
  }

  get accountSource(): Bytes | null {
    let value = this.get("accountSource");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set accountSource(value: Bytes | null) {
    if (!value) {
      this.unset("accountSource");
    } else {
      this.set("accountSource", Value.fromBytes(<Bytes>value));
    }
  }
}

export class SymbolTradeVolume extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SymbolTradeVolume entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SymbolTradeVolume must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SymbolTradeVolume", id.toString(), this);
    }
  }

  static loadInBlock(id: string): SymbolTradeVolume | null {
    return changetype<SymbolTradeVolume | null>(
      store.get_in_block("SymbolTradeVolume", id)
    );
  }

  static load(id: string): SymbolTradeVolume | null {
    return changetype<SymbolTradeVolume | null>(
      store.get("SymbolTradeVolume", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbolId(): BigInt {
    let value = this.get("symbolId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set symbolId(value: BigInt) {
    this.set("symbolId", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get updateTimestamp(): BigInt {
    let value = this.get("updateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updateTimestamp(value: BigInt) {
    this.set("updateTimestamp", Value.fromBigInt(value));
  }

  get volume(): BigInt {
    let value = this.get("volume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set volume(value: BigInt) {
    this.set("volume", Value.fromBigInt(value));
  }

  get accountSource(): Bytes | null {
    let value = this.get("accountSource");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set accountSource(value: Bytes | null) {
    if (!value) {
      this.unset("accountSource");
    } else {
      this.set("accountSource", Value.fromBytes(<Bytes>value));
    }
  }

  get symbol(): string {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }
}

export class OpenInterest extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OpenInterest entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type OpenInterest must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("OpenInterest", id.toString(), this);
    }
  }

  static loadInBlock(id: string): OpenInterest | null {
    return changetype<OpenInterest | null>(
      store.get_in_block("OpenInterest", id)
    );
  }

  static load(id: string): OpenInterest | null {
    return changetype<OpenInterest | null>(store.get("OpenInterest", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get accumulatedAmount(): BigInt {
    let value = this.get("accumulatedAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set accumulatedAmount(value: BigInt) {
    this.set("accumulatedAmount", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get accountSource(): Bytes | null {
    let value = this.get("accountSource");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set accountSource(value: Bytes | null) {
    if (!value) {
      this.unset("accountSource");
    } else {
      this.set("accountSource", Value.fromBytes(<Bytes>value));
    }
  }

  get symbol(): string | null {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set symbol(value: string | null) {
    if (!value) {
      this.unset("symbol");
    } else {
      this.set("symbol", Value.fromString(<string>value));
    }
  }
}

export class PriceCheck extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PriceCheck entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PriceCheck must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PriceCheck", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PriceCheck | null {
    return changetype<PriceCheck | null>(store.get_in_block("PriceCheck", id));
  }

  static load(id: string): PriceCheck | null {
    return changetype<PriceCheck | null>(store.get("PriceCheck", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get givenPrice(): BigInt {
    let value = this.get("givenPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set givenPrice(value: BigInt) {
    this.set("givenPrice", Value.fromBigInt(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get event(): string {
    let value = this.get("event");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set event(value: string) {
    this.set("event", Value.fromString(value));
  }

  get additionalInfo(): string | null {
    let value = this.get("additionalInfo");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set additionalInfo(value: string | null) {
    if (!value) {
      this.unset("additionalInfo");
    } else {
      this.set("additionalInfo", Value.fromString(<string>value));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transaction(): Bytes {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transaction(value: Bytes) {
    this.set("transaction", Value.fromBytes(value));
  }
}

export class ExecutedLiquidation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ExecutedLiquidation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ExecutedLiquidation must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ExecutedLiquidation", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ExecutedLiquidation | null {
    return changetype<ExecutedLiquidation | null>(
      store.get_in_block("ExecutedLiquidation", id)
    );
  }

  static load(id: string): ExecutedLiquidation | null {
    return changetype<ExecutedLiquidation | null>(
      store.get("ExecutedLiquidation", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get partyA(): Bytes {
    let value = this.get("partyA");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set partyA(value: Bytes) {
    this.set("partyA", Value.fromBytes(value));
  }

  get liquidator(): Bytes {
    let value = this.get("liquidator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set liquidator(value: Bytes) {
    this.set("liquidator", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class PartyALiquidation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PartyALiquidation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PartyALiquidation must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PartyALiquidation", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PartyALiquidation | null {
    return changetype<PartyALiquidation | null>(
      store.get_in_block("PartyALiquidation", id)
    );
  }

  static load(id: string): PartyALiquidation | null {
    return changetype<PartyALiquidation | null>(
      store.get("PartyALiquidation", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get partyA(): Bytes {
    let value = this.get("partyA");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set partyA(value: Bytes) {
    this.set("partyA", Value.fromBytes(value));
  }

  get liquidator(): Bytes {
    let value = this.get("liquidator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set liquidator(value: Bytes) {
    this.set("liquidator", Value.fromBytes(value));
  }

  get liquidationType(): i32 {
    let value = this.get("liquidationType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set liquidationType(value: i32) {
    this.set("liquidationType", Value.fromI32(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transaction(): Bytes {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transaction(value: Bytes) {
    this.set("transaction", Value.fromBytes(value));
  }

  get liquidateAllocatedBalance(): BigInt | null {
    let value = this.get("liquidateAllocatedBalance");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set liquidateAllocatedBalance(value: BigInt | null) {
    if (!value) {
      this.unset("liquidateAllocatedBalance");
    } else {
      this.set("liquidateAllocatedBalance", Value.fromBigInt(<BigInt>value));
    }
  }

  get liquidateCva(): BigInt | null {
    let value = this.get("liquidateCva");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set liquidateCva(value: BigInt | null) {
    if (!value) {
      this.unset("liquidateCva");
    } else {
      this.set("liquidateCva", Value.fromBigInt(<BigInt>value));
    }
  }

  get liquidatePendingCva(): BigInt | null {
    let value = this.get("liquidatePendingCva");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set liquidatePendingCva(value: BigInt | null) {
    if (!value) {
      this.unset("liquidatePendingCva");
    } else {
      this.set("liquidatePendingCva", Value.fromBigInt(<BigInt>value));
    }
  }

  get liquidateLf(): BigInt | null {
    let value = this.get("liquidateLf");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set liquidateLf(value: BigInt | null) {
    if (!value) {
      this.unset("liquidateLf");
    } else {
      this.set("liquidateLf", Value.fromBigInt(<BigInt>value));
    }
  }

  get liquidatePendingLf(): BigInt | null {
    let value = this.get("liquidatePendingLf");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set liquidatePendingLf(value: BigInt | null) {
    if (!value) {
      this.unset("liquidatePendingLf");
    } else {
      this.set("liquidatePendingLf", Value.fromBigInt(<BigInt>value));
    }
  }

  get liquidatePrice(): BigInt | null {
    let value = this.get("liquidatePrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set liquidatePrice(value: BigInt | null) {
    if (!value) {
      this.unset("liquidatePrice");
    } else {
      this.set("liquidatePrice", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class PartyBLiquidation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PartyBLiquidation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PartyBLiquidation must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PartyBLiquidation", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PartyBLiquidation | null {
    return changetype<PartyBLiquidation | null>(
      store.get_in_block("PartyBLiquidation", id)
    );
  }

  static load(id: string): PartyBLiquidation | null {
    return changetype<PartyBLiquidation | null>(
      store.get("PartyBLiquidation", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get partyA(): Bytes {
    let value = this.get("partyA");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set partyA(value: Bytes) {
    this.set("partyA", Value.fromBytes(value));
  }

  get partyB(): Bytes {
    let value = this.get("partyB");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set partyB(value: Bytes) {
    this.set("partyB", Value.fromBytes(value));
  }

  get liquidator(): Bytes {
    let value = this.get("liquidator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set liquidator(value: Bytes) {
    this.set("liquidator", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transaction(): Bytes {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transaction(value: Bytes) {
    this.set("transaction", Value.fromBytes(value));
  }

  get liquidateAllocatedBalance(): BigInt | null {
    let value = this.get("liquidateAllocatedBalance");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set liquidateAllocatedBalance(value: BigInt | null) {
    if (!value) {
      this.unset("liquidateAllocatedBalance");
    } else {
      this.set("liquidateAllocatedBalance", Value.fromBigInt(<BigInt>value));
    }
  }

  get liquidateCva(): BigInt | null {
    let value = this.get("liquidateCva");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set liquidateCva(value: BigInt | null) {
    if (!value) {
      this.unset("liquidateCva");
    } else {
      this.set("liquidateCva", Value.fromBigInt(<BigInt>value));
    }
  }

  get liquidatePendingCva(): BigInt | null {
    let value = this.get("liquidatePendingCva");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set liquidatePendingCva(value: BigInt | null) {
    if (!value) {
      this.unset("liquidatePendingCva");
    } else {
      this.set("liquidatePendingCva", Value.fromBigInt(<BigInt>value));
    }
  }

  get liquidateLf(): BigInt | null {
    let value = this.get("liquidateLf");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set liquidateLf(value: BigInt | null) {
    if (!value) {
      this.unset("liquidateLf");
    } else {
      this.set("liquidateLf", Value.fromBigInt(<BigInt>value));
    }
  }

  get liquidatePendingLf(): BigInt | null {
    let value = this.get("liquidatePendingLf");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set liquidatePendingLf(value: BigInt | null) {
    if (!value) {
      this.unset("liquidatePendingLf");
    } else {
      this.set("liquidatePendingLf", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class PartyALiquidationDisputed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save PartyALiquidationDisputed entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PartyALiquidationDisputed must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PartyALiquidationDisputed", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PartyALiquidationDisputed | null {
    return changetype<PartyALiquidationDisputed | null>(
      store.get_in_block("PartyALiquidationDisputed", id)
    );
  }

  static load(id: string): PartyALiquidationDisputed | null {
    return changetype<PartyALiquidationDisputed | null>(
      store.get("PartyALiquidationDisputed", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get partyA(): Bytes {
    let value = this.get("partyA");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set partyA(value: Bytes) {
    this.set("partyA", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transaction(): Bytes {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transaction(value: Bytes) {
    this.set("transaction", Value.fromBytes(value));
  }
}

export class Configuration extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Configuration entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Configuration must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Configuration", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Configuration | null {
    return changetype<Configuration | null>(
      store.get_in_block("Configuration", id)
    );
  }

  static load(id: string): Configuration | null {
    return changetype<Configuration | null>(store.get("Configuration", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get collateral(): Bytes {
    let value = this.get("collateral");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set collateral(value: Bytes) {
    this.set("collateral", Value.fromBytes(value));
  }

  get updateTimestamp(): BigInt {
    let value = this.get("updateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updateTimestamp(value: BigInt) {
    this.set("updateTimestamp", Value.fromBigInt(value));
  }

  get updateTransaction(): Bytes {
    let value = this.get("updateTransaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set updateTransaction(value: Bytes) {
    this.set("updateTransaction", Value.fromBytes(value));
  }
}

export class GrantedRole extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GrantedRole entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type GrantedRole must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("GrantedRole", id.toString(), this);
    }
  }

  static loadInBlock(id: string): GrantedRole | null {
    return changetype<GrantedRole | null>(
      store.get_in_block("GrantedRole", id)
    );
  }

  static load(id: string): GrantedRole | null {
    return changetype<GrantedRole | null>(store.get("GrantedRole", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get role(): string {
    let value = this.get("role");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set role(value: string) {
    this.set("role", Value.fromString(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get grantTransaction(): Bytes | null {
    let value = this.get("grantTransaction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set grantTransaction(value: Bytes | null) {
    if (!value) {
      this.unset("grantTransaction");
    } else {
      this.set("grantTransaction", Value.fromBytes(<Bytes>value));
    }
  }

  get revokeTransaction(): Bytes | null {
    let value = this.get("revokeTransaction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set revokeTransaction(value: Bytes | null) {
    if (!value) {
      this.unset("revokeTransaction");
    } else {
      this.set("revokeTransaction", Value.fromBytes(<Bytes>value));
    }
  }

  get updateTimestamp(): BigInt {
    let value = this.get("updateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updateTimestamp(value: BigInt) {
    this.set("updateTimestamp", Value.fromBigInt(value));
  }
}

export class PaidFundingFee extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PaidFundingFee entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PaidFundingFee must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PaidFundingFee", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PaidFundingFee | null {
    return changetype<PaidFundingFee | null>(
      store.get_in_block("PaidFundingFee", id)
    );
  }

  static load(id: string): PaidFundingFee | null {
    return changetype<PaidFundingFee | null>(store.get("PaidFundingFee", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get quote(): string {
    let value = this.get("quote");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set quote(value: string) {
    this.set("quote", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transaction(): Bytes {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transaction(value: Bytes) {
    this.set("transaction", Value.fromBytes(value));
  }

  get rateApplied(): BigInt {
    let value = this.get("rateApplied");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set rateApplied(value: BigInt) {
    this.set("rateApplied", Value.fromBigInt(value));
  }

  get paidFee(): BigInt {
    let value = this.get("paidFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set paidFee(value: BigInt) {
    this.set("paidFee", Value.fromBigInt(value));
  }
}

export class Solver extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Solver entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Solver must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Solver", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Solver | null {
    return changetype<Solver | null>(store.get_in_block("Solver", id));
  }

  static load(id: string): Solver | null {
    return changetype<Solver | null>(store.get("Solver", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes | null {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes | null) {
    if (!value) {
      this.unset("address");
    } else {
      this.set("address", Value.fromBytes(<Bytes>value));
    }
  }

  get quotes(): Array<string> {
    let value = this.get("quotes");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  get hourlySymbolFundingRateAverage(): Array<string> {
    let value = this.get("hourlySymbolFundingRateAverage");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }
}

export class SolverDailyHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SolverDailyHistory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SolverDailyHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SolverDailyHistory", id.toString(), this);
    }
  }

  static loadInBlock(id: string): SolverDailyHistory | null {
    return changetype<SolverDailyHistory | null>(
      store.get_in_block("SolverDailyHistory", id)
    );
  }

  static load(id: string): SolverDailyHistory | null {
    return changetype<SolverDailyHistory | null>(
      store.get("SolverDailyHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get solver(): string {
    let value = this.get("solver");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set solver(value: string) {
    this.set("solver", Value.fromString(value));
  }

  get accountSource(): Bytes | null {
    let value = this.get("accountSource");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set accountSource(value: Bytes | null) {
    if (!value) {
      this.unset("accountSource");
    } else {
      this.set("accountSource", Value.fromBytes(<Bytes>value));
    }
  }

  get quotesCount(): BigInt {
    let value = this.get("quotesCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set quotesCount(value: BigInt) {
    this.set("quotesCount", Value.fromBigInt(value));
  }

  get tradeVolume(): BigInt {
    let value = this.get("tradeVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tradeVolume(value: BigInt) {
    this.set("tradeVolume", Value.fromBigInt(value));
  }

  get openTradeVolume(): BigInt {
    let value = this.get("openTradeVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set openTradeVolume(value: BigInt) {
    this.set("openTradeVolume", Value.fromBigInt(value));
  }

  get closeTradeVolume(): BigInt {
    let value = this.get("closeTradeVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set closeTradeVolume(value: BigInt) {
    this.set("closeTradeVolume", Value.fromBigInt(value));
  }

  get generatedFee(): BigInt {
    let value = this.get("generatedFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set generatedFee(value: BigInt) {
    this.set("generatedFee", Value.fromBigInt(value));
  }

  get updateTimestamp(): BigInt {
    let value = this.get("updateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updateTimestamp(value: BigInt) {
    this.set("updateTimestamp", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class SolverTotalHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SolverTotalHistory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SolverTotalHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SolverTotalHistory", id.toString(), this);
    }
  }

  static loadInBlock(id: string): SolverTotalHistory | null {
    return changetype<SolverTotalHistory | null>(
      store.get_in_block("SolverTotalHistory", id)
    );
  }

  static load(id: string): SolverTotalHistory | null {
    return changetype<SolverTotalHistory | null>(
      store.get("SolverTotalHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get solver(): string {
    let value = this.get("solver");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set solver(value: string) {
    this.set("solver", Value.fromString(value));
  }

  get accountSource(): Bytes | null {
    let value = this.get("accountSource");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set accountSource(value: Bytes | null) {
    if (!value) {
      this.unset("accountSource");
    } else {
      this.set("accountSource", Value.fromBytes(<Bytes>value));
    }
  }

  get quotesCount(): BigInt {
    let value = this.get("quotesCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set quotesCount(value: BigInt) {
    this.set("quotesCount", Value.fromBigInt(value));
  }

  get tradeVolume(): BigInt {
    let value = this.get("tradeVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tradeVolume(value: BigInt) {
    this.set("tradeVolume", Value.fromBigInt(value));
  }

  get openTradeVolume(): BigInt {
    let value = this.get("openTradeVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set openTradeVolume(value: BigInt) {
    this.set("openTradeVolume", Value.fromBigInt(value));
  }

  get closeTradeVolume(): BigInt {
    let value = this.get("closeTradeVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set closeTradeVolume(value: BigInt) {
    this.set("closeTradeVolume", Value.fromBigInt(value));
  }

  get generatedFee(): BigInt {
    let value = this.get("generatedFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set generatedFee(value: BigInt) {
    this.set("generatedFee", Value.fromBigInt(value));
  }

  get updateTimestamp(): BigInt {
    let value = this.get("updateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updateTimestamp(value: BigInt) {
    this.set("updateTimestamp", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class HourlySymbolFundingRateAverage extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save HourlySymbolFundingRateAverage entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type HourlySymbolFundingRateAverage must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("HourlySymbolFundingRateAverage", id.toString(), this);
    }
  }

  static loadInBlock(id: string): HourlySymbolFundingRateAverage | null {
    return changetype<HourlySymbolFundingRateAverage | null>(
      store.get_in_block("HourlySymbolFundingRateAverage", id)
    );
  }

  static load(id: string): HourlySymbolFundingRateAverage | null {
    return changetype<HourlySymbolFundingRateAverage | null>(
      store.get("HourlySymbolFundingRateAverage", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get solver(): string {
    let value = this.get("solver");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set solver(value: string) {
    this.set("solver", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get lastUpdatedTimestamp(): BigInt {
    let value = this.get("lastUpdatedTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastUpdatedTimestamp(value: BigInt) {
    this.set("lastUpdatedTimestamp", Value.fromBigInt(value));
  }

  get rateApplied(): BigInt {
    let value = this.get("rateApplied");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set rateApplied(value: BigInt) {
    this.set("rateApplied", Value.fromBigInt(value));
  }

  get longRateApplied(): BigInt {
    let value = this.get("longRateApplied");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set longRateApplied(value: BigInt) {
    this.set("longRateApplied", Value.fromBigInt(value));
  }

  get shortRateApplied(): BigInt {
    let value = this.get("shortRateApplied");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set shortRateApplied(value: BigInt) {
    this.set("shortRateApplied", Value.fromBigInt(value));
  }

  get fundingRateEpochDuration(): BigInt {
    let value = this.get("fundingRateEpochDuration");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set fundingRateEpochDuration(value: BigInt) {
    this.set("fundingRateEpochDuration", Value.fromBigInt(value));
  }
}

export class PartyASymbolPrice extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PartyASymbolPrice entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PartyASymbolPrice must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PartyASymbolPrice", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PartyASymbolPrice | null {
    return changetype<PartyASymbolPrice | null>(
      store.get_in_block("PartyASymbolPrice", id)
    );
  }

  static load(id: string): PartyASymbolPrice | null {
    return changetype<PartyASymbolPrice | null>(
      store.get("PartyASymbolPrice", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get partyA(): Bytes {
    let value = this.get("partyA");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set partyA(value: Bytes) {
    this.set("partyA", Value.fromBytes(value));
  }

  get symbolId(): BigInt {
    let value = this.get("symbolId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set symbolId(value: BigInt) {
    this.set("symbolId", Value.fromBigInt(value));
  }

  get requestedOpenPrice(): BigInt {
    let value = this.get("requestedOpenPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set requestedOpenPrice(value: BigInt) {
    this.set("requestedOpenPrice", Value.fromBigInt(value));
  }

  get timeStamp(): BigInt {
    let value = this.get("timeStamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timeStamp(value: BigInt) {
    this.set("timeStamp", Value.fromBigInt(value));
  }

  get trHash(): Bytes {
    let value = this.get("trHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set trHash(value: Bytes) {
    this.set("trHash", Value.fromBytes(value));
  }
}

export class QuoteSettlementData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save QuoteSettlementData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type QuoteSettlementData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("QuoteSettlementData", id.toString(), this);
    }
  }

  static loadInBlock(id: string): QuoteSettlementData | null {
    return changetype<QuoteSettlementData | null>(
      store.get_in_block("QuoteSettlementData", id)
    );
  }

  static load(id: string): QuoteSettlementData | null {
    return changetype<QuoteSettlementData | null>(
      store.get("QuoteSettlementData", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get quote(): string {
    let value = this.get("quote");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set quote(value: string) {
    this.set("quote", Value.fromString(value));
  }

  get updatedPrice(): BigInt {
    let value = this.get("updatedPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updatedPrice(value: BigInt) {
    this.set("updatedPrice", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transaction(): Bytes {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transaction(value: Bytes) {
    this.set("transaction", Value.fromBytes(value));
  }
}

export class AccountSettlementData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AccountSettlementData entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AccountSettlementData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AccountSettlementData", id.toString(), this);
    }
  }

  static loadInBlock(id: string): AccountSettlementData | null {
    return changetype<AccountSettlementData | null>(
      store.get_in_block("AccountSettlementData", id)
    );
  }

  static load(id: string): AccountSettlementData | null {
    return changetype<AccountSettlementData | null>(
      store.get("AccountSettlementData", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): string | null {
    let value = this.get("account");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set account(value: string | null) {
    if (!value) {
      this.unset("account");
    } else {
      this.set("account", Value.fromString(<string>value));
    }
  }

  get newPartyAAllocatedBalance(): BigInt {
    let value = this.get("newPartyAAllocatedBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set newPartyAAllocatedBalance(value: BigInt) {
    this.set("newPartyAAllocatedBalance", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transaction(): Bytes {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transaction(value: Bytes) {
    this.set("transaction", Value.fromBytes(value));
  }
}
