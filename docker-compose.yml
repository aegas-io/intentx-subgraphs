version: '3'
services:
  postgres:
    image: postgres:13
    container_name: postgres
    ports:
      - '5433:5432'
    command: ["postgres", "-cshared_preload_libraries=pg_stat_statements"]
    environment:
      POSTGRES_USER: graph-node
      POSTGRES_PASSWORD: let-me-in
      POSTGRES_DB: graph-node
      POSTGRES_INITDB_ARGS: "--locale=C --encoding=UTF8"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - graph-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "graph-node"]
      interval: 5s
      timeout: 5s
      retries: 5

  ipfs:
    image: ipfs/kubo:v0.16.0
    container_name: ipfs
    ports:
      - '5001:5001'
    volumes:
      - ipfs-data:/data/ipfs
    networks:
      - graph-network
    healthcheck:
      test: ["CMD", "ipfs", "id"]
      interval: 5s
      timeout: 5s
      retries: 5

  graph-node:
    image: graphprotocol/graph-node:latest
    container_name: graph-node
    platform: linux/amd64
    ports:
      - '8000:8000'
      - '8001:8001'
      - '8020:8020'
      - '8030:8030'
      - '8040:8040'
    depends_on:
      postgres:
        condition: service_healthy
      ipfs:
        condition: service_healthy
    environment:
      postgres_host: postgres
      postgres_user: graph-node
      postgres_pass: let-me-in
      postgres_db: graph-node
      ipfs: 'ipfs:5001'
      ethereum: 'coti-mainnet:https://mainnet.coti.io/rpc'
      GRAPH_LOG: debug
      RUST_LOG: debug,hyper=info,reqwest=info,ethabi=info,graph_node=debug,ethereum_adapter=debug,graph_ethereum=debug
      RUST_BACKTRACE: full
      GRAPH_ETHEREUM_GENESIS_BLOCK_NUMBER: 185858
      EXPERIMENTAL_SUBGRAPH_VERSION_SWITCHING_MODE: synced
      ETHEREUM_REORG_THRESHOLD: 1
      ETHEREUM_ANCESTOR_COUNT: 500
      ETHEREUM_POLLING_INTERVAL: 1500
      GRAPH_ETHEREUM_MAX_BLOCK_RANGE_SIZE: 1000
      GRAPH_ETHEREUM_REQUEST_RETRIES: 10
      GRAPH_ETHEREUM_BLOCK_INGESTOR_MAX_CONCURRENT_JSON_RPC_REQUESTS: 10
    networks:
      - graph-network
    dns:
      - 8.8.8.8
      - 8.8.4.4

  subgraph-deployer:
    image: node:18
    container_name: subgraph-deployer
    working_dir: /app
    volumes:
      - ./:/app
    depends_on:
      graph-node:
        condition: service_started
      ipfs:
        condition: service_healthy
    command: >
      bash -c "cd /app && 
      sleep 30 && 
      npx graph create --node http://graph-node:8020/ coti-analytics || true && 
      cd analytics && 
      cp -f ../configs/aggregated/coti.json ../configs/current.json &&
      npx graph deploy --node http://graph-node:8020/ --ipfs http://ipfs:5001 coti-analytics --version-label v0.0.3"
    networks:
      - graph-network

networks:
  graph-network:
    driver: bridge

volumes:
  postgres-data:
  ipfs-data: